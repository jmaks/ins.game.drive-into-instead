<?xml version="1.0" ?><!DOCTYPE IGv1><Game><Settings Author="instead" Description="" Name="drive_into_instead" Version="0.1"/><Items><Item Name="global" Type="Scene">-- Эта псевдокомната выполнят роль глобального контекста исполнения программы.
-- Команды, перечисленные здесь, выполнятся сразу после запуска, а переменные видны из всех функций и объектов.
-- Здесь можно задать параметры инициализации игры:

game.codepage = 'UTF-8';
game.act = 'Не получается.';
game.inv = 'Гм.. Странная штука..';
game.use = 'Не сработает...';

-- Обязательная строка! Запускает  файл игры.
dofile('game.lua');
dofile('func.lua');</Item><Item Name="main" Type="Scene">-- Эта обязательная сцена, которая появится первой, после запуска игры.
-- Код этой сцены будет помещен в файл main.lua

nam = 'Первая сцена',
dsc = function()
	return goto('help');
end,
--pic = '',
--obj = {},</Item><Item Name="help" Type="Scene">nam = 'PyIge',
dsc = txtc(txtb('Добро пожаловать в PyIge'))..[[^^

Эта комната является небольшой справкой по пользованию редактором^^

Редактор PyIge создан для автоматизации процесса разработки игр для INSTEAD. Ниже представлены некоторые особенности редактора, которые важно иметь в виду при разработке игр в PyIge^^

]]..txtb('1) Проект')..[[^ 
К элементам игры (сценам, объектам, диалогам, функциям) можно обращаться, как к отдельным сущностям. Чтобы обеспечить такую возможность, элементы должны храниться независимо, а не в виде цельных файлов Lua. Это достигается при помощи создания проекта. На устройстве хранения проект представляет собой XML-файл. При открытии проекта содержимое загружается в память во внутренние стрктуры, при сохранении вновь преобразуется в XML.^^

]]..txtb('2) Редактор.')..[[^
 Разработчик может создавать четыре вида объектов в редакторе: сцены, объекты, диалоги, функции.
 При этом для сцен, объектов и диалогов достаточно написать только &quot;внутренности&quot;, а идентификатором объекта в игре будет его имя в списке слева. Имя должно быть валидным идентификатором. При генерации файлов игры внутренний код объектов будет преобразован непосредственно в объекты при помощи добавления обрамления и табуляции. В новых версиях возможна поддержка автодобавления запятых. 
 Однако, всё вышесказанное не относится к функциям. Функции никак не форматируются и являются цельными кусками кода, которые будут вставлены в func.lua. func.lua может содержать не только функции, а любые конструкции на языке Lua. Имя функции в списке - произвольное имя, и не попадет в код.^^

]]..txtb('3) Обязательные сцены')..[[^
 При создании нового проекта в редакторе будут присутствовать как минимум две обязательные сцены: global и main. Эти сцены нельзя удалить и переименовать.
 Сцена global выполняет роль глобального контекста исполнения. Её содержимое без изменения будет перенесено в файл main.lua.
 Сцена main - первая сцена, в которую попадает пользователь при запуске игры. Эта сцена попадет в конец файла main.lua.^^

]]..txtb('4) Генерация кода')..[[^
 В результате генерации в памяти будет создано три файла main.lua, game.lua и func.lua.
 Код этих файлов в конечном виде можно посмотреть на владке &quot;Код&quot;, выбрав нужный файл.
 Как только произошло переключение между вкладками - код обновляется.
 Имя игры и версия добавляются в код атвтоматически, и задаются в окне настроек проекта.^^

]]..txtb('5) Запуск игры')..[[^
 Для запуска игры необходимо, чтобы проект был сохранен, а в окне настроек указан путь до интерпретатора INSTEAD.
 Перед запуском происходит сохранение файлов  main.lua, game.lua и func.lua на диск.
 Если вы открыли проект, находящийся в директории, где у вас нет права на запись (например C:\Program Files\INSTEAD\Games\MyGame), то при сохранении файлов возникнет ошибка.
 Чтобы запустился не просто INSTEAD, а ваша игра в нем, лучше не менять опции запуска INSTEAD по умолчанию. Опция -debug включает развернутые сообщения об ошибкахе, -noautosave означает, что игра будет начата с первой сцены, а не с последнего сохранения. -gamespath и -game указывают на вашу игру, и не следует убирать ни одну из этих опций.^^

]]..txtb('6) Образцы кода')..[[^
 При создании сцены/объекта/диалога или функции в редакторе кода появляется заготовка кода, включающая часто используемые поля, такие как nam, dsc, tak, way и т.д. Эти заготовки созданы автором редактора PyIge и кажутся ему удобными. Однако, если вы хотите исправить или дополнить их, то для этого достаточно отредактировать одноименные файлы obj.txt, room.txt, dlg.txt в папке templates редактора INSTEAD. Кроме того, в папке templates присутсвуют файлы main.txt и global.txt - код обязательных комнат при создании нового проекта.^^


 Если вам всё понятно, то вы можете удалить эту сцену и начать писать свою игру =) ^
 Если есть вопросы, предложения или замечания, то высказаться можно на форуме INSTEAD в разделе &quot;Редактор игр&quot;.]],</Item><Item Name="Comment" Type="Function">-- Вкладка &quot;Функции&quot; дает возможность разработчику создавать собственные функции, классы, переменные, типы данных и писать альтернативный код на языке Lua.

-- Код каждого объекта будет помещен в файл func.lua. Для вызова этих функций из игры в глобальном контексте исполнения обязательно должна быть команда dofile(&quot;func.lua&quot;)

-- Пример:

hello_world = function(s) 
	return 'Hello World!'
end;</Item></Items></Game>